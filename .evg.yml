#########################################
#      Java Driver Config for Evergreen #
#########################################


#######################################
#            Functions                #
#######################################

functions:
  "fetch source" :
      command: git.get_project
      params:
          directory: "mongo-java-driver"

  "fetch mongodb" :
    command: shell.exec
    params:
      working_dir: "mongo-java-driver"
      script: |
        set -o verbose
        set -o errexit
        ls -la
        curl -s ${mongo_url} --output mongo-archive.${ext|tgz}
        ${decompress} mongo-archive.${ext|tgz}
        mv mongodb* mongodb
        chmod +x ./mongodb/bin/mongod${extension}
        if [ ${windows|false} = true ]; then
            rm -rf /cygdrive/c/mongodb
            cp -r mongodb /cygdrive/c/mongodb
        fi


  "compile and analyze" :
    command: shell.exec
    params:
      working_dir: "mongo-java-driver"
      script: |
        set -o verbose
        set -o errexit

        ./gradlew -PxmlReports.enabled=true --info -x test clean check jar testClasses

  "run tests" :
    command: shell.exec
    params:
      working_dir: "mongo-java-driver"
      script: |
        set -o verbose
        set -o errexit

        export ORCHESTRATION_FILE="orchestration_configs/${topology_type}s/${orchestration_file}"

        mkdir -p $(dirname "$ORCHESTRATION_FILE")

        # Borrow MO config from the C driver
        #
        curl --location "https://raw.githubusercontent.com/mongodb/mongo-c-driver/master/orchestration_configs/${topology_type}s/${orchestration_file}" > "$ORCHESTRATION_FILE"
        export ORCHESTRATION_URL="http://localhost:8889/v1/${topology_type}s"
        export MONGO_ORCHESTRATION_HOME=/tmp/orchestration-home

        if [ ! -d /tmp/orchestration-home ]; then
           mkdir /tmp/orchestration-home
        fi

        ${start_mongo_orchestration}
        ${start_topology}


        mongodb_test_uri="mongodb://${auth_uri_prefix}${hosts}"

        ./gradlew -Dorg.mongodb.test.uri=$mongodb_test_uri --stacktrace --info test

  "attach junit results" :
    command: attach.xunit_results
    params:
      file: ./mongo-java-driver/*/build/test-results/TEST-*.xml


#######################################
#               Tasks                 #
#######################################

tasks:
    - name: compileAndAnalyze
      commands:
        - func: "fetch source"
        - func: "compile and analyze"
    - name: test
      depends_on:
      - name: compileAndAnalyze
        variant: compile
      commands:
        - func: "fetch source"
        - func: "fetch mongodb"
        - func: "run tests"
        - func: "attach junit results"


#######################################
#              Scripts                #
#######################################

scripts:
  ## Scripts that are shared between buildvariants
  scripts:
    mongo_orchestration:
      unix: &mongo_orchestration_unix
        start_mongo_orchestration: |
          trap 'set +o errexit; mongo-orchestration --pidfile /data/mo.pid stop;' EXIT
          pidfile=/data/mo.pid
          if [ -f $pidfile ]; then
            echo "Existing pidfile $pidfile"
            cat $pidfile
            mongo-orchestration --pidfile /data/mo.pid stop;
            rm -f $pidfile
          fi
          df -h
          ls -la
          echo "Starting Mongo Orchestration..."
          echo "{ \"releases\": { \"default\": \"`pwd`/mongodb/bin\" } }" > orchestration.config
          TMPDIR=/data/db mongo-orchestration -f orchestration.config -e default start --socket-timeout-ms=60000 --bind=127.0.0.1  --enable-majority-read-concern --pidfile $pidfile
          curl -s http://localhost:8889/
      start_topology_command: &start_topology_command
        start_topology: |
          curl -s --data @"$ORCHESTRATION_FILE" "$ORCHESTRATION_URL"
          ./mongodb/bin/mongo $MONGO_SHELL_CONNECTION_FLAGS --eval 'printjson(db.serverBuildInfo())' admin
          ./mongodb/bin/mongo $MONGO_SHELL_CONNECTION_FLAGS --eval 'printjson(db.adminCommand({getCmdLineOpts:1}))' admin
          ./mongodb/bin/mongo $MONGO_SHELL_CONNECTION_FLAGS --eval 'printjson(db.isMaster())' admin


#######################################
#               Axes                  #
#######################################

axes:
  - id: mongodb_version
    display_name: MongoDB Version
    values:
      - id: "3.4"
        display_name: "3.4"
        variables:
          mongodb_full_version: "3.4.0-rc0"
          ubuntu_os_download: "ubuntu1604"
      - id: "3.2"
        display_name: "3.2"
        variables:
          mongodb_full_version: "3.2.9"
          ubuntu_os_download: "ubuntu1604"
      - id: "3.0"
        display_name: "3.0"
        variables:
          mongodb_full_version: "3.0.12"
          ubuntu_os_download: "ubuntu1404"
      - id: "2.6"
        display_name: "2.6"
        variables:
          mongodb_full_version: "2.6.12"
          ubuntu_os_download: "ubuntu1404"
      - id: "2.4"
        display_name: "2.4"
        variables:
          mongodb_full_version: "2.4.14"
          ubuntu_os_download: "ubuntu1204"
  - id: auth
    display_name: Authentication
    values:
      - id: "enabled"
        display_name: "Auth Enabled"
        variables:
          auth_uri_prefix: "bob:pwd123@"
          orchestration_file: "auth.json"
      - id: "disabled"
        display_name: "Auth Disabled"
        variables:
          auth_uri_prefix: ""
          orchestration_file: "basic.json"
  - id: os
    display_name: OS
    values:
      - id: ubuntu1604
        display_name: Ubuntu 16.04
        run_on: ubuntu1604-test
        variables:
          <<: *start_topology_command
          <<: *mongo_orchestration_unix
          mongo_url: "http://downloads.mongodb.com/linux/mongodb-linux-x86_64-enterprise-${ubuntu_os_download}-${mongodb_full_version}.tgz"
  - id: topology_type
    display_name: Cluster Type
    values:
      - id: server
        display_name: Standalone
        variables:
          hosts: "localhost:27017"
      - id: replica_set
        display_name: Replica Set
        variables:
          hosts: "localhost:27017,localhost:27018"
      - id: sharded_cluster
        display_name: Sharded
        variables:
          hosts: "localhost:27017"

#######################################
#             Variants                #
#######################################

buildvariants:
  - name: compile
    display_name: "Compile and Analyze"
    tasks:
    - name: compileAndAnalyze
      run_on:
      - ubuntu1604-test
  - matrix_name: "test"
    matrix_spec: {os: "*", topology_type: "*", mongodb_version: "*", auth: "*"}
    display_name: "${os} ${topology_type} ${mongodb_version} ${auth}"
    tasks:
    - name: test
